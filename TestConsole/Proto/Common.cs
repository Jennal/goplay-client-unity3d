// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf.Data {

  /// <summary>Holder for reflection information generated from common.proto</summary>
  public static partial class CommonReflection {

    #region Descriptor
    /// <summary>File descriptor for common.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxjb21tb24ucHJvdG8SBnBiZGF0YSIvCgdEdW5nZW9uEhEKCUNoYXB0ZXJJ",
            "RBgBIAEoBRIRCglEdW5nZW9uSUQYAiABKAUiRQoMRHVuZ2VvbkxldmVsEhEK",
            "CUNoYXB0ZXJJRBgBIAEoBRIRCglEdW5nZW9uSUQYAiABKAUSDwoHTGV2ZWxJ",
            "RBgDIAEoBSJBCgtEdW5nZW9uU3RhchIRCglDaGFwdGVySUQYASABKAUSEQoJ",
            "RHVuZ2VvbklEGAIgASgFEgwKBFN0YXIYAyABKAUi+QEKDlBsYXllclByb3Bl",
            "cnR5Eg0KBU1heEhQGAEgASgFEgoKAkhQGAIgASgFEgoKAk1QGAMgASgFEg4K",
            "BkF0dGFjaxgEIAEoBRIPCgdEZWZlbnNlGAUgASgFEgwKBENyaXQYBiABKAUS",
            "DwoHRXhwbG9kZRgHIAEoBRIMCgRDb2luGAggASgFEgwKBEZvb2QYCSABKAUS",
            "NAoHU3BlY2lhbBgKIAMoCzIjLnBiZGF0YS5QbGF5ZXJQcm9wZXJ0eS5TcGVj",
            "aWFsRW50cnkaLgoMU3BlY2lhbEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoBToCOAEigQEKDFBsYXllckVxdWlwcxIOCgZXZWFwb24YASABKAUS",
            "DAoEUmluZxgCIAEoBRIQCghOZWNrbGFjZRgDIAEoBRIQCghFYXJyaW5ncxgE",
            "IAEoBRIPCgdIYWlycGluGAUgASgFEhAKCEJyYWNlbGV0GAYgASgFEgwKBEJl",
            "bHQYByABKAUiFAoFQ2FyZHMSCwoDSURzGAEgAygFIlIKDkNhcmRQYWNrUmV3",
            "YXJkEiIKBFR5cGUYASABKA4yFC5wYmRhdGEuQ2FyZFBhY2tUeXBlEhwKBUNh",
            "cmRzGAIgASgLMg0ucGJkYXRhLkNhcmRzIoYCCgxQbGF5ZXJTdGF0dXMSLgoO",
            "UGxheWVyUHJvcGVydHkYASABKAsyFi5wYmRhdGEuUGxheWVyUHJvcGVydHkS",
            "KgoMUGxheWVyRXF1aXBzGAIgASgLMhQucGJkYXRhLlBsYXllckVxdWlwcxId",
            "CgZFcXVpcHMYAyABKAsyDS5wYmRhdGEuQ2FyZHMSGwoER2VtcxgEIAEoCzIN",
            "LnBiZGF0YS5DYXJkcxIdCgZTa2lsbHMYBSABKAsyDS5wYmRhdGEuQ2FyZHMS",
            "IAoJQmxlc3NpbmdzGAYgASgLMg0ucGJkYXRhLkNhcmRzEh0KBkN1cnNlcxgH",
            "IAEoCzINLnBiZGF0YS5DYXJkcyI7CglDYXJkSW5NYXASIgoGU3RhdHVzGAEg",
            "ASgOMhIucGJkYXRhLkNhcmRTdGF0dXMSCgoCSUQYAiABKAUiSgoHQ2FyZE1h",
            "cBINCgVXaWR0aBgBIAEoBRIOCgZIZWlnaHQYAiABKAUSIAoFQ2FyZHMYAyAD",
            "KAsyES5wYmRhdGEuQ2FyZEluTWFwIgcKBUV2ZW50KkQKDENhcmRQYWNrVHlw",
            "ZRIJCgVXSElURRAAEgkKBUdSRUVOEAESCAoEQkxVRRACEgoKBlBVUlBMRRAD",
            "EggKBEdPTEQQBCp3CgpDYXJkU3RhdHVzEgkKBVNUQVJUEAASBwoDRU5EEAES",
            "CgoGQ0xPU0VEEAISFgoST1BFTl9OT1RfVFJJR0dFUkVEEAMSFwoTT1BFTl9U",
            "UklHR0VSRURfT05DRRAEEhgKFE9QRU5fVFJJR0dFUkVEX01VTFRJEAVCEKoC",
            "DVByb3RvYnVmLkRhdGFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protobuf.Data.CardPackType), typeof(global::Protobuf.Data.CardStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.Dungeon), global::Protobuf.Data.Dungeon.Parser, new[]{ "ChapterID", "DungeonID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonLevel), global::Protobuf.Data.DungeonLevel.Parser, new[]{ "ChapterID", "DungeonID", "LevelID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonStar), global::Protobuf.Data.DungeonStar.Parser, new[]{ "ChapterID", "DungeonID", "Star" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.PlayerProperty), global::Protobuf.Data.PlayerProperty.Parser, new[]{ "MaxHP", "HP", "MP", "Attack", "Defense", "Crit", "Explode", "Coin", "Food", "Special" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.PlayerEquips), global::Protobuf.Data.PlayerEquips.Parser, new[]{ "Weapon", "Ring", "Necklace", "Earrings", "Hairpin", "Bracelet", "Belt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.Cards), global::Protobuf.Data.Cards.Parser, new[]{ "IDs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.CardPackReward), global::Protobuf.Data.CardPackReward.Parser, new[]{ "Type", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.PlayerStatus), global::Protobuf.Data.PlayerStatus.Parser, new[]{ "PlayerProperty", "PlayerEquips", "Equips", "Gems", "Skills", "Blessings", "Curses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.CardInMap), global::Protobuf.Data.CardInMap.Parser, new[]{ "Status", "ID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.CardMap), global::Protobuf.Data.CardMap.Parser, new[]{ "Width", "Height", "Cards" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.Event), global::Protobuf.Data.Event.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///* 奖励卡包颜色 */
  /// </summary>
  public enum CardPackType {
    [pbr::OriginalName("WHITE")] White = 0,
    [pbr::OriginalName("GREEN")] Green = 1,
    [pbr::OriginalName("BLUE")] Blue = 2,
    [pbr::OriginalName("PURPLE")] Purple = 3,
    [pbr::OriginalName("GOLD")] Gold = 4,
  }

  /// <summary>
  ///* 卡片状态 */
  /// </summary>
  public enum CardStatus {
    /// <summary>
    ///* 开始位置 */
    /// </summary>
    [pbr::OriginalName("START")] Start = 0,
    /// <summary>
    ///* 结束位置 */
    /// </summary>
    [pbr::OriginalName("END")] End = 1,
    /// <summary>
    ///* 未打开 */
    /// </summary>
    [pbr::OriginalName("CLOSED")] Closed = 2,
    /// <summary>
    ///* 打开，未走过 */
    /// </summary>
    [pbr::OriginalName("OPEN_NOT_TRIGGERED")] OpenNotTriggered = 3,
    /// <summary>
    ///* 打开，走过，并且只能触发一次，即不能再次被触发 */
    /// </summary>
    [pbr::OriginalName("OPEN_TRIGGERED_ONCE")] OpenTriggeredOnce = 4,
    /// <summary>
    ///* 打开，走过，可以再次被触发 */
    /// </summary>
    [pbr::OriginalName("OPEN_TRIGGERED_MULTI")] OpenTriggeredMulti = 5,
  }

  #endregion

  #region Messages
  /// <summary>
  ///* 副本 */
  /// </summary>
  public sealed partial class Dungeon : pb::IMessage<Dungeon> {
    private static readonly pb::MessageParser<Dungeon> _parser = new pb::MessageParser<Dungeon>(() => new Dungeon());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Dungeon> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dungeon() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dungeon(Dungeon other) : this() {
      chapterID_ = other.chapterID_;
      dungeonID_ = other.dungeonID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Dungeon Clone() {
      return new Dungeon(this);
    }

    /// <summary>Field number for the "ChapterID" field.</summary>
    public const int ChapterIDFieldNumber = 1;
    private int chapterID_;
    /// <summary>
    ///* 章节 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterID {
      get { return chapterID_; }
      set {
        chapterID_ = value;
      }
    }

    /// <summary>Field number for the "DungeonID" field.</summary>
    public const int DungeonIDFieldNumber = 2;
    private int dungeonID_;
    /// <summary>
    ///* 副本 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DungeonID {
      get { return dungeonID_; }
      set {
        dungeonID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Dungeon);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Dungeon other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterID != other.ChapterID) return false;
      if (DungeonID != other.DungeonID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterID != 0) hash ^= ChapterID.GetHashCode();
      if (DungeonID != 0) hash ^= DungeonID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterID);
      }
      if (DungeonID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DungeonID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterID);
      }
      if (DungeonID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DungeonID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Dungeon other) {
      if (other == null) {
        return;
      }
      if (other.ChapterID != 0) {
        ChapterID = other.ChapterID;
      }
      if (other.DungeonID != 0) {
        DungeonID = other.DungeonID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterID = input.ReadInt32();
            break;
          }
          case 16: {
            DungeonID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 副本层级 */
  /// </summary>
  public sealed partial class DungeonLevel : pb::IMessage<DungeonLevel> {
    private static readonly pb::MessageParser<DungeonLevel> _parser = new pb::MessageParser<DungeonLevel>(() => new DungeonLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonLevel(DungeonLevel other) : this() {
      chapterID_ = other.chapterID_;
      dungeonID_ = other.dungeonID_;
      levelID_ = other.levelID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonLevel Clone() {
      return new DungeonLevel(this);
    }

    /// <summary>Field number for the "ChapterID" field.</summary>
    public const int ChapterIDFieldNumber = 1;
    private int chapterID_;
    /// <summary>
    ///* 章节 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterID {
      get { return chapterID_; }
      set {
        chapterID_ = value;
      }
    }

    /// <summary>Field number for the "DungeonID" field.</summary>
    public const int DungeonIDFieldNumber = 2;
    private int dungeonID_;
    /// <summary>
    ///* 副本 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DungeonID {
      get { return dungeonID_; }
      set {
        dungeonID_ = value;
      }
    }

    /// <summary>Field number for the "LevelID" field.</summary>
    public const int LevelIDFieldNumber = 3;
    private int levelID_;
    /// <summary>
    ///* 副本层级 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelID {
      get { return levelID_; }
      set {
        levelID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterID != other.ChapterID) return false;
      if (DungeonID != other.DungeonID) return false;
      if (LevelID != other.LevelID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterID != 0) hash ^= ChapterID.GetHashCode();
      if (DungeonID != 0) hash ^= DungeonID.GetHashCode();
      if (LevelID != 0) hash ^= LevelID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterID);
      }
      if (DungeonID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DungeonID);
      }
      if (LevelID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterID);
      }
      if (DungeonID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DungeonID);
      }
      if (LevelID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonLevel other) {
      if (other == null) {
        return;
      }
      if (other.ChapterID != 0) {
        ChapterID = other.ChapterID;
      }
      if (other.DungeonID != 0) {
        DungeonID = other.DungeonID;
      }
      if (other.LevelID != 0) {
        LevelID = other.LevelID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterID = input.ReadInt32();
            break;
          }
          case 16: {
            DungeonID = input.ReadInt32();
            break;
          }
          case 24: {
            LevelID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 副本星数 */
  /// </summary>
  public sealed partial class DungeonStar : pb::IMessage<DungeonStar> {
    private static readonly pb::MessageParser<DungeonStar> _parser = new pb::MessageParser<DungeonStar>(() => new DungeonStar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonStar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStar(DungeonStar other) : this() {
      chapterID_ = other.chapterID_;
      dungeonID_ = other.dungeonID_;
      star_ = other.star_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStar Clone() {
      return new DungeonStar(this);
    }

    /// <summary>Field number for the "ChapterID" field.</summary>
    public const int ChapterIDFieldNumber = 1;
    private int chapterID_;
    /// <summary>
    ///* 章节 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChapterID {
      get { return chapterID_; }
      set {
        chapterID_ = value;
      }
    }

    /// <summary>Field number for the "DungeonID" field.</summary>
    public const int DungeonIDFieldNumber = 2;
    private int dungeonID_;
    /// <summary>
    ///* 副本 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DungeonID {
      get { return dungeonID_; }
      set {
        dungeonID_ = value;
      }
    }

    /// <summary>Field number for the "Star" field.</summary>
    public const int StarFieldNumber = 3;
    private int star_;
    /// <summary>
    ///* 星数 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Star {
      get { return star_; }
      set {
        star_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonStar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonStar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChapterID != other.ChapterID) return false;
      if (DungeonID != other.DungeonID) return false;
      if (Star != other.Star) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChapterID != 0) hash ^= ChapterID.GetHashCode();
      if (DungeonID != 0) hash ^= DungeonID.GetHashCode();
      if (Star != 0) hash ^= Star.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChapterID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChapterID);
      }
      if (DungeonID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DungeonID);
      }
      if (Star != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Star);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChapterID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChapterID);
      }
      if (DungeonID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DungeonID);
      }
      if (Star != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Star);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonStar other) {
      if (other == null) {
        return;
      }
      if (other.ChapterID != 0) {
        ChapterID = other.ChapterID;
      }
      if (other.DungeonID != 0) {
        DungeonID = other.DungeonID;
      }
      if (other.Star != 0) {
        Star = other.Star;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChapterID = input.ReadInt32();
            break;
          }
          case 16: {
            DungeonID = input.ReadInt32();
            break;
          }
          case 24: {
            Star = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 角色属性 */
  /// </summary>
  public sealed partial class PlayerProperty : pb::IMessage<PlayerProperty> {
    private static readonly pb::MessageParser<PlayerProperty> _parser = new pb::MessageParser<PlayerProperty>(() => new PlayerProperty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProperty(PlayerProperty other) : this() {
      maxHP_ = other.maxHP_;
      hP_ = other.hP_;
      mP_ = other.mP_;
      attack_ = other.attack_;
      defense_ = other.defense_;
      crit_ = other.crit_;
      explode_ = other.explode_;
      coin_ = other.coin_;
      food_ = other.food_;
      special_ = other.special_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerProperty Clone() {
      return new PlayerProperty(this);
    }

    /// <summary>Field number for the "MaxHP" field.</summary>
    public const int MaxHPFieldNumber = 1;
    private int maxHP_;
    /// <summary>
    ///* 最大生命 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHP {
      get { return maxHP_; }
      set {
        maxHP_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 2;
    private int hP_;
    /// <summary>
    ///* 当前生命 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 3;
    private int mP_;
    /// <summary>
    ///* 能量 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 4;
    private int attack_;
    /// <summary>
    ///* 攻击 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "Defense" field.</summary>
    public const int DefenseFieldNumber = 5;
    private int defense_;
    /// <summary>
    ///* 防御 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Defense {
      get { return defense_; }
      set {
        defense_ = value;
      }
    }

    /// <summary>Field number for the "Crit" field.</summary>
    public const int CritFieldNumber = 6;
    private int crit_;
    /// <summary>
    ///* 暴击 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Crit {
      get { return crit_; }
      set {
        crit_ = value;
      }
    }

    /// <summary>Field number for the "Explode" field.</summary>
    public const int ExplodeFieldNumber = 7;
    private int explode_;
    /// <summary>
    ///* 爆伤 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Explode {
      get { return explode_; }
      set {
        explode_ = value;
      }
    }

    /// <summary>Field number for the "Coin" field.</summary>
    public const int CoinFieldNumber = 8;
    private int coin_;
    /// <summary>
    ///* 金币 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "Food" field.</summary>
    public const int FoodFieldNumber = 9;
    private int food_;
    /// <summary>
    ///* 食物 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Food {
      get { return food_; }
      set {
        food_ = value;
      }
    }

    /// <summary>Field number for the "Special" field.</summary>
    public const int SpecialFieldNumber = 10;
    private static readonly pbc::MapField<string, int>.Codec _map_special_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 82);
    private readonly pbc::MapField<string, int> special_ = new pbc::MapField<string, int>();
    /// <summary>
    ///* 特殊关卡的特殊数值 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Special {
      get { return special_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaxHP != other.MaxHP) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      if (Attack != other.Attack) return false;
      if (Defense != other.Defense) return false;
      if (Crit != other.Crit) return false;
      if (Explode != other.Explode) return false;
      if (Coin != other.Coin) return false;
      if (Food != other.Food) return false;
      if (!Special.Equals(other.Special)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MaxHP != 0) hash ^= MaxHP.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Defense != 0) hash ^= Defense.GetHashCode();
      if (Crit != 0) hash ^= Crit.GetHashCode();
      if (Explode != 0) hash ^= Explode.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Food != 0) hash ^= Food.GetHashCode();
      hash ^= Special.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MaxHP != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MaxHP);
      }
      if (HP != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MP);
      }
      if (Attack != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Attack);
      }
      if (Defense != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Defense);
      }
      if (Crit != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Crit);
      }
      if (Explode != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Explode);
      }
      if (Coin != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Coin);
      }
      if (Food != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Food);
      }
      special_.WriteTo(output, _map_special_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MaxHP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHP);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Defense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Defense);
      }
      if (Crit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Crit);
      }
      if (Explode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Explode);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Food != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Food);
      }
      size += special_.CalculateSize(_map_special_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerProperty other) {
      if (other == null) {
        return;
      }
      if (other.MaxHP != 0) {
        MaxHP = other.MaxHP;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Defense != 0) {
        Defense = other.Defense;
      }
      if (other.Crit != 0) {
        Crit = other.Crit;
      }
      if (other.Explode != 0) {
        Explode = other.Explode;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Food != 0) {
        Food = other.Food;
      }
      special_.Add(other.special_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MaxHP = input.ReadInt32();
            break;
          }
          case 16: {
            HP = input.ReadInt32();
            break;
          }
          case 24: {
            MP = input.ReadInt32();
            break;
          }
          case 32: {
            Attack = input.ReadInt32();
            break;
          }
          case 40: {
            Defense = input.ReadInt32();
            break;
          }
          case 48: {
            Crit = input.ReadInt32();
            break;
          }
          case 56: {
            Explode = input.ReadInt32();
            break;
          }
          case 64: {
            Coin = input.ReadInt32();
            break;
          }
          case 72: {
            Food = input.ReadInt32();
            break;
          }
          case 82: {
            special_.AddEntriesFrom(input, _map_special_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 身上装备 */
  /// </summary>
  public sealed partial class PlayerEquips : pb::IMessage<PlayerEquips> {
    private static readonly pb::MessageParser<PlayerEquips> _parser = new pb::MessageParser<PlayerEquips>(() => new PlayerEquips());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerEquips> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEquips() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEquips(PlayerEquips other) : this() {
      weapon_ = other.weapon_;
      ring_ = other.ring_;
      necklace_ = other.necklace_;
      earrings_ = other.earrings_;
      hairpin_ = other.hairpin_;
      bracelet_ = other.bracelet_;
      belt_ = other.belt_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerEquips Clone() {
      return new PlayerEquips(this);
    }

    /// <summary>Field number for the "Weapon" field.</summary>
    public const int WeaponFieldNumber = 1;
    private int weapon_;
    /// <summary>
    ///* 武器 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Weapon {
      get { return weapon_; }
      set {
        weapon_ = value;
      }
    }

    /// <summary>Field number for the "Ring" field.</summary>
    public const int RingFieldNumber = 2;
    private int ring_;
    /// <summary>
    ///* 戒指 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Ring {
      get { return ring_; }
      set {
        ring_ = value;
      }
    }

    /// <summary>Field number for the "Necklace" field.</summary>
    public const int NecklaceFieldNumber = 3;
    private int necklace_;
    /// <summary>
    ///* 项链 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Necklace {
      get { return necklace_; }
      set {
        necklace_ = value;
      }
    }

    /// <summary>Field number for the "Earrings" field.</summary>
    public const int EarringsFieldNumber = 4;
    private int earrings_;
    /// <summary>
    ///* 耳环 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Earrings {
      get { return earrings_; }
      set {
        earrings_ = value;
      }
    }

    /// <summary>Field number for the "Hairpin" field.</summary>
    public const int HairpinFieldNumber = 5;
    private int hairpin_;
    /// <summary>
    ///* 发簪 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hairpin {
      get { return hairpin_; }
      set {
        hairpin_ = value;
      }
    }

    /// <summary>Field number for the "Bracelet" field.</summary>
    public const int BraceletFieldNumber = 6;
    private int bracelet_;
    /// <summary>
    ///* 手镯 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bracelet {
      get { return bracelet_; }
      set {
        bracelet_ = value;
      }
    }

    /// <summary>Field number for the "Belt" field.</summary>
    public const int BeltFieldNumber = 7;
    private int belt_;
    /// <summary>
    ///* 腰带 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Belt {
      get { return belt_; }
      set {
        belt_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerEquips);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerEquips other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Weapon != other.Weapon) return false;
      if (Ring != other.Ring) return false;
      if (Necklace != other.Necklace) return false;
      if (Earrings != other.Earrings) return false;
      if (Hairpin != other.Hairpin) return false;
      if (Bracelet != other.Bracelet) return false;
      if (Belt != other.Belt) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Weapon != 0) hash ^= Weapon.GetHashCode();
      if (Ring != 0) hash ^= Ring.GetHashCode();
      if (Necklace != 0) hash ^= Necklace.GetHashCode();
      if (Earrings != 0) hash ^= Earrings.GetHashCode();
      if (Hairpin != 0) hash ^= Hairpin.GetHashCode();
      if (Bracelet != 0) hash ^= Bracelet.GetHashCode();
      if (Belt != 0) hash ^= Belt.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Weapon != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Weapon);
      }
      if (Ring != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Ring);
      }
      if (Necklace != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Necklace);
      }
      if (Earrings != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Earrings);
      }
      if (Hairpin != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Hairpin);
      }
      if (Bracelet != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Bracelet);
      }
      if (Belt != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Belt);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Weapon != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weapon);
      }
      if (Ring != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Ring);
      }
      if (Necklace != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Necklace);
      }
      if (Earrings != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Earrings);
      }
      if (Hairpin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hairpin);
      }
      if (Bracelet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bracelet);
      }
      if (Belt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Belt);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerEquips other) {
      if (other == null) {
        return;
      }
      if (other.Weapon != 0) {
        Weapon = other.Weapon;
      }
      if (other.Ring != 0) {
        Ring = other.Ring;
      }
      if (other.Necklace != 0) {
        Necklace = other.Necklace;
      }
      if (other.Earrings != 0) {
        Earrings = other.Earrings;
      }
      if (other.Hairpin != 0) {
        Hairpin = other.Hairpin;
      }
      if (other.Bracelet != 0) {
        Bracelet = other.Bracelet;
      }
      if (other.Belt != 0) {
        Belt = other.Belt;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Weapon = input.ReadInt32();
            break;
          }
          case 16: {
            Ring = input.ReadInt32();
            break;
          }
          case 24: {
            Necklace = input.ReadInt32();
            break;
          }
          case 32: {
            Earrings = input.ReadInt32();
            break;
          }
          case 40: {
            Hairpin = input.ReadInt32();
            break;
          }
          case 48: {
            Bracelet = input.ReadInt32();
            break;
          }
          case 56: {
            Belt = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 卡牌列表 */
  /// </summary>
  public sealed partial class Cards : pb::IMessage<Cards> {
    private static readonly pb::MessageParser<Cards> _parser = new pb::MessageParser<Cards>(() => new Cards());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cards(Cards other) : this() {
      iDs_ = other.iDs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cards Clone() {
      return new Cards(this);
    }

    /// <summary>Field number for the "IDs" field.</summary>
    public const int IDsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_iDs_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> iDs_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> IDs {
      get { return iDs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!iDs_.Equals(other.iDs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= iDs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      iDs_.WriteTo(output, _repeated_iDs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += iDs_.CalculateSize(_repeated_iDs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cards other) {
      if (other == null) {
        return;
      }
      iDs_.Add(other.iDs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            iDs_.AddEntriesFrom(input, _repeated_iDs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 奖励卡包 */
  /// </summary>
  public sealed partial class CardPackReward : pb::IMessage<CardPackReward> {
    private static readonly pb::MessageParser<CardPackReward> _parser = new pb::MessageParser<CardPackReward>(() => new CardPackReward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardPackReward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardPackReward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardPackReward(CardPackReward other) : this() {
      type_ = other.type_;
      Cards = other.cards_ != null ? other.Cards.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardPackReward Clone() {
      return new CardPackReward(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protobuf.Data.CardPackType type_ = 0;
    /// <summary>
    ///* 卡包种类 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.CardPackType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private global::Protobuf.Data.Cards cards_;
    /// <summary>
    ///* 卡片列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Cards Cards {
      get { return cards_; }
      set {
        cards_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardPackReward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardPackReward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Cards, other.Cards)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (cards_ != null) hash ^= Cards.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (cards_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Cards);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (cards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cards);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardPackReward other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.cards_ != null) {
        if (cards_ == null) {
          cards_ = new global::Protobuf.Data.Cards();
        }
        Cards.MergeFrom(other.Cards);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Protobuf.Data.CardPackType) input.ReadEnum();
            break;
          }
          case 18: {
            if (cards_ == null) {
              cards_ = new global::Protobuf.Data.Cards();
            }
            input.ReadMessage(cards_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 玩家状态 */
  /// </summary>
  public sealed partial class PlayerStatus : pb::IMessage<PlayerStatus> {
    private static readonly pb::MessageParser<PlayerStatus> _parser = new pb::MessageParser<PlayerStatus>(() => new PlayerStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStatus(PlayerStatus other) : this() {
      PlayerProperty = other.playerProperty_ != null ? other.PlayerProperty.Clone() : null;
      PlayerEquips = other.playerEquips_ != null ? other.PlayerEquips.Clone() : null;
      Equips = other.equips_ != null ? other.Equips.Clone() : null;
      Gems = other.gems_ != null ? other.Gems.Clone() : null;
      Skills = other.skills_ != null ? other.Skills.Clone() : null;
      Blessings = other.blessings_ != null ? other.Blessings.Clone() : null;
      Curses = other.curses_ != null ? other.Curses.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerStatus Clone() {
      return new PlayerStatus(this);
    }

    /// <summary>Field number for the "PlayerProperty" field.</summary>
    public const int PlayerPropertyFieldNumber = 1;
    private global::Protobuf.Data.PlayerProperty playerProperty_;
    /// <summary>
    ///* 角色属性 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.PlayerProperty PlayerProperty {
      get { return playerProperty_; }
      set {
        playerProperty_ = value;
      }
    }

    /// <summary>Field number for the "PlayerEquips" field.</summary>
    public const int PlayerEquipsFieldNumber = 2;
    private global::Protobuf.Data.PlayerEquips playerEquips_;
    /// <summary>
    ///* 身上装备 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.PlayerEquips PlayerEquips {
      get { return playerEquips_; }
      set {
        playerEquips_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 3;
    private global::Protobuf.Data.Cards equips_;
    /// <summary>
    ///* 持有的装备卡ID列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Cards Equips {
      get { return equips_; }
      set {
        equips_ = value;
      }
    }

    /// <summary>Field number for the "Gems" field.</summary>
    public const int GemsFieldNumber = 4;
    private global::Protobuf.Data.Cards gems_;
    /// <summary>
    ///* 持有的宝石卡ID列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Cards Gems {
      get { return gems_; }
      set {
        gems_ = value;
      }
    }

    /// <summary>Field number for the "Skills" field.</summary>
    public const int SkillsFieldNumber = 5;
    private global::Protobuf.Data.Cards skills_;
    /// <summary>
    ///* 持有的秘术卡ID列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Cards Skills {
      get { return skills_; }
      set {
        skills_ = value;
      }
    }

    /// <summary>Field number for the "Blessings" field.</summary>
    public const int BlessingsFieldNumber = 6;
    private global::Protobuf.Data.Cards blessings_;
    /// <summary>
    ///* 持有的祝福卡ID列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Cards Blessings {
      get { return blessings_; }
      set {
        blessings_ = value;
      }
    }

    /// <summary>Field number for the "Curses" field.</summary>
    public const int CursesFieldNumber = 7;
    private global::Protobuf.Data.Cards curses_;
    /// <summary>
    ///* 持有的诅咒卡ID列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Cards Curses {
      get { return curses_; }
      set {
        curses_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PlayerProperty, other.PlayerProperty)) return false;
      if (!object.Equals(PlayerEquips, other.PlayerEquips)) return false;
      if (!object.Equals(Equips, other.Equips)) return false;
      if (!object.Equals(Gems, other.Gems)) return false;
      if (!object.Equals(Skills, other.Skills)) return false;
      if (!object.Equals(Blessings, other.Blessings)) return false;
      if (!object.Equals(Curses, other.Curses)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (playerProperty_ != null) hash ^= PlayerProperty.GetHashCode();
      if (playerEquips_ != null) hash ^= PlayerEquips.GetHashCode();
      if (equips_ != null) hash ^= Equips.GetHashCode();
      if (gems_ != null) hash ^= Gems.GetHashCode();
      if (skills_ != null) hash ^= Skills.GetHashCode();
      if (blessings_ != null) hash ^= Blessings.GetHashCode();
      if (curses_ != null) hash ^= Curses.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (playerProperty_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerProperty);
      }
      if (playerEquips_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerEquips);
      }
      if (equips_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Equips);
      }
      if (gems_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Gems);
      }
      if (skills_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Skills);
      }
      if (blessings_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Blessings);
      }
      if (curses_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Curses);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (playerProperty_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerProperty);
      }
      if (playerEquips_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerEquips);
      }
      if (equips_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Equips);
      }
      if (gems_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gems);
      }
      if (skills_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Skills);
      }
      if (blessings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Blessings);
      }
      if (curses_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Curses);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerStatus other) {
      if (other == null) {
        return;
      }
      if (other.playerProperty_ != null) {
        if (playerProperty_ == null) {
          playerProperty_ = new global::Protobuf.Data.PlayerProperty();
        }
        PlayerProperty.MergeFrom(other.PlayerProperty);
      }
      if (other.playerEquips_ != null) {
        if (playerEquips_ == null) {
          playerEquips_ = new global::Protobuf.Data.PlayerEquips();
        }
        PlayerEquips.MergeFrom(other.PlayerEquips);
      }
      if (other.equips_ != null) {
        if (equips_ == null) {
          equips_ = new global::Protobuf.Data.Cards();
        }
        Equips.MergeFrom(other.Equips);
      }
      if (other.gems_ != null) {
        if (gems_ == null) {
          gems_ = new global::Protobuf.Data.Cards();
        }
        Gems.MergeFrom(other.Gems);
      }
      if (other.skills_ != null) {
        if (skills_ == null) {
          skills_ = new global::Protobuf.Data.Cards();
        }
        Skills.MergeFrom(other.Skills);
      }
      if (other.blessings_ != null) {
        if (blessings_ == null) {
          blessings_ = new global::Protobuf.Data.Cards();
        }
        Blessings.MergeFrom(other.Blessings);
      }
      if (other.curses_ != null) {
        if (curses_ == null) {
          curses_ = new global::Protobuf.Data.Cards();
        }
        Curses.MergeFrom(other.Curses);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerProperty_ == null) {
              playerProperty_ = new global::Protobuf.Data.PlayerProperty();
            }
            input.ReadMessage(playerProperty_);
            break;
          }
          case 18: {
            if (playerEquips_ == null) {
              playerEquips_ = new global::Protobuf.Data.PlayerEquips();
            }
            input.ReadMessage(playerEquips_);
            break;
          }
          case 26: {
            if (equips_ == null) {
              equips_ = new global::Protobuf.Data.Cards();
            }
            input.ReadMessage(equips_);
            break;
          }
          case 34: {
            if (gems_ == null) {
              gems_ = new global::Protobuf.Data.Cards();
            }
            input.ReadMessage(gems_);
            break;
          }
          case 42: {
            if (skills_ == null) {
              skills_ = new global::Protobuf.Data.Cards();
            }
            input.ReadMessage(skills_);
            break;
          }
          case 50: {
            if (blessings_ == null) {
              blessings_ = new global::Protobuf.Data.Cards();
            }
            input.ReadMessage(blessings_);
            break;
          }
          case 58: {
            if (curses_ == null) {
              curses_ = new global::Protobuf.Data.Cards();
            }
            input.ReadMessage(curses_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 地图上的卡片 */
  /// </summary>
  public sealed partial class CardInMap : pb::IMessage<CardInMap> {
    private static readonly pb::MessageParser<CardInMap> _parser = new pb::MessageParser<CardInMap>(() => new CardInMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardInMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInMap(CardInMap other) : this() {
      status_ = other.status_;
      iD_ = other.iD_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardInMap Clone() {
      return new CardInMap(this);
    }

    /// <summary>Field number for the "Status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Protobuf.Data.CardStatus status_ = 0;
    /// <summary>
    ///* 卡片状态 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.CardStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 2;
    private int iD_;
    /// <summary>
    ///* 卡片ID */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardInMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardInMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (ID != other.ID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (ID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardInMap other) {
      if (other == null) {
        return;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            status_ = (global::Protobuf.Data.CardStatus) input.ReadEnum();
            break;
          }
          case 16: {
            ID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 地图信息 */
  /// </summary>
  public sealed partial class CardMap : pb::IMessage<CardMap> {
    private static readonly pb::MessageParser<CardMap> _parser = new pb::MessageParser<CardMap>(() => new CardMap());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CardMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardMap(CardMap other) : this() {
      width_ = other.width_;
      height_ = other.height_;
      cards_ = other.cards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CardMap Clone() {
      return new CardMap(this);
    }

    /// <summary>Field number for the "Width" field.</summary>
    public const int WidthFieldNumber = 1;
    private int width_;
    /// <summary>
    ///* 地图宽度 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "Height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    /// <summary>
    ///* 地图高度 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "Cards" field.</summary>
    public const int CardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protobuf.Data.CardInMap> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(26, global::Protobuf.Data.CardInMap.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Data.CardInMap> cards_ = new pbc::RepeatedField<global::Protobuf.Data.CardInMap>();
    /// <summary>
    ///* 地图卡牌ID列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Data.CardInMap> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CardMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CardMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      hash ^= cards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Width != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CardMap other) {
      if (other == null) {
        return;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      cards_.Add(other.cards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 26: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 事件 */
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.CommonReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
