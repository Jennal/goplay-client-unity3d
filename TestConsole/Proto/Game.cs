// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protobuf.Data {

  /// <summary>Holder for reflection information generated from game.proto</summary>
  public static partial class GameReflection {

    #region Descriptor
    /// <summary>File descriptor for game.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpnYW1lLnByb3RvEgZwYmRhdGEaDGNvbW1vbi5wcm90byIfCg9HZXRHb2xk",
            "UmVzcG9uc2USDAoER29sZBgBIAEoBSItChZHZXRSZXdhcmRTdGFyc1Jlc3Bv",
            "bnNlEhMKC1Jld2FyZFN0YXJzGAEgASgFIkQKF0R1bmdlb25Qcm9ncmVzc1Jl",
            "c3BvbnNlEikKDER1bmdlb25TdGFycxgBIAMoCzITLnBiZGF0YS5EdW5nZW9u",
            "U3RhciJOChlEdW5nZW9uVW5maW5pc2hlZFJlc3BvbnNlEjEKE0N1cnJlbnRE",
            "dW5nZW9uTGV2ZWwYASABKAsyFC5wYmRhdGEuRHVuZ2VvbkxldmVsIjcKE0R1",
            "bmdlb25TdGFydFJlcXVlc3QSIAoHRHVuZ2VvbhgBIAEoCzIPLnBiZGF0YS5E",
            "dW5nZW9uIsYBChREdW5nZW9uU3RhcnRSZXNwb25zZRIqCgxEdW5nZW9uTGV2",
            "ZWwYASABKAsyFC5wYmRhdGEuRHVuZ2VvbkxldmVsEioKDFBsYXllclN0YXR1",
            "cxgCIAEoCzIULnBiZGF0YS5QbGF5ZXJTdGF0dXMSFwoPUGxheWVyRGVhZFRp",
            "bWVzGAMgASgFEiAKB0NhcmRNYXAYBCABKAsyDy5wYmRhdGEuQ2FyZE1hcBIb",
            "ChNDdXJyZW50Q2FyZE1hcEluZGV4GAUgASgFIiMKEkR1bmdlb25Nb3ZlUmVx",
            "dWVzdBINCgVJbmRleBgBIAEoBSI0ChNEdW5nZW9uTW92ZVJlc3BvbnNlEh0K",
            "BkV2ZW50cxgBIAMoCzINLnBiZGF0YS5FdmVudCIqChpEdW5nZW9uUmV2aXZl",
            "UHJpY2VSZXNwb25zZRIMCgRHb2xkGAEgASgFIigKFUR1bmdlb25SZXZpdmVS",
            "ZXNwb25zZRIPCgdTdWNjZXNzGAEgASgIIkAKFUR1bmdlb25GaW5pc2hSZXNw",
            "b25zZRInCgdSZXdhcmRzGAEgAygLMhYucGJkYXRhLkNhcmRQYWNrUmV3YXJk",
            "QhCqAg1Qcm90b2J1Zi5EYXRhYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Protobuf.Data.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.GetGoldResponse), global::Protobuf.Data.GetGoldResponse.Parser, new[]{ "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.GetRewardStarsResponse), global::Protobuf.Data.GetRewardStarsResponse.Parser, new[]{ "RewardStars" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonProgressResponse), global::Protobuf.Data.DungeonProgressResponse.Parser, new[]{ "DungeonStars" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonUnfinishedResponse), global::Protobuf.Data.DungeonUnfinishedResponse.Parser, new[]{ "CurrentDungeonLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonStartRequest), global::Protobuf.Data.DungeonStartRequest.Parser, new[]{ "Dungeon" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonStartResponse), global::Protobuf.Data.DungeonStartResponse.Parser, new[]{ "DungeonLevel", "PlayerStatus", "PlayerDeadTimes", "CardMap", "CurrentCardMapIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonMoveRequest), global::Protobuf.Data.DungeonMoveRequest.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonMoveResponse), global::Protobuf.Data.DungeonMoveResponse.Parser, new[]{ "Events" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonRevivePriceResponse), global::Protobuf.Data.DungeonRevivePriceResponse.Parser, new[]{ "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonReviveResponse), global::Protobuf.Data.DungeonReviveResponse.Parser, new[]{ "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protobuf.Data.DungeonFinishResponse), global::Protobuf.Data.DungeonFinishResponse.Parser, new[]{ "Rewards" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///* 元宝数量 */
  /// </summary>
  public sealed partial class GetGoldResponse : pb::IMessage<GetGoldResponse> {
    private static readonly pb::MessageParser<GetGoldResponse> _parser = new pb::MessageParser<GetGoldResponse>(() => new GetGoldResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetGoldResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGoldResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGoldResponse(GetGoldResponse other) : this() {
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetGoldResponse Clone() {
      return new GetGoldResponse(this);
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    ///* 元宝数量 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetGoldResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetGoldResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetGoldResponse other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 可兑奖的星数 */
  /// </summary>
  public sealed partial class GetRewardStarsResponse : pb::IMessage<GetRewardStarsResponse> {
    private static readonly pb::MessageParser<GetRewardStarsResponse> _parser = new pb::MessageParser<GetRewardStarsResponse>(() => new GetRewardStarsResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRewardStarsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardStarsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardStarsResponse(GetRewardStarsResponse other) : this() {
      rewardStars_ = other.rewardStars_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRewardStarsResponse Clone() {
      return new GetRewardStarsResponse(this);
    }

    /// <summary>Field number for the "RewardStars" field.</summary>
    public const int RewardStarsFieldNumber = 1;
    private int rewardStars_;
    /// <summary>
    ///* 可兑奖的星数 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RewardStars {
      get { return rewardStars_; }
      set {
        rewardStars_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRewardStarsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRewardStarsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RewardStars != other.RewardStars) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RewardStars != 0) hash ^= RewardStars.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardStars != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RewardStars);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardStars != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardStars);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRewardStarsResponse other) {
      if (other == null) {
        return;
      }
      if (other.RewardStars != 0) {
        RewardStars = other.RewardStars;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RewardStars = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 副本进度 */
  /// </summary>
  public sealed partial class DungeonProgressResponse : pb::IMessage<DungeonProgressResponse> {
    private static readonly pb::MessageParser<DungeonProgressResponse> _parser = new pb::MessageParser<DungeonProgressResponse>(() => new DungeonProgressResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonProgressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonProgressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonProgressResponse(DungeonProgressResponse other) : this() {
      dungeonStars_ = other.dungeonStars_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonProgressResponse Clone() {
      return new DungeonProgressResponse(this);
    }

    /// <summary>Field number for the "DungeonStars" field.</summary>
    public const int DungeonStarsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.Data.DungeonStar> _repeated_dungeonStars_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.Data.DungeonStar.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Data.DungeonStar> dungeonStars_ = new pbc::RepeatedField<global::Protobuf.Data.DungeonStar>();
    /// <summary>
    ///* 副本星数，0星表示未通关的副本 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Data.DungeonStar> DungeonStars {
      get { return dungeonStars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonProgressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonProgressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dungeonStars_.Equals(other.dungeonStars_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dungeonStars_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dungeonStars_.WriteTo(output, _repeated_dungeonStars_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dungeonStars_.CalculateSize(_repeated_dungeonStars_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonProgressResponse other) {
      if (other == null) {
        return;
      }
      dungeonStars_.Add(other.dungeonStars_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            dungeonStars_.AddEntriesFrom(input, _repeated_dungeonStars_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///* 上次中途退出时，正在玩的副本层级 */
  /// </summary>
  public sealed partial class DungeonUnfinishedResponse : pb::IMessage<DungeonUnfinishedResponse> {
    private static readonly pb::MessageParser<DungeonUnfinishedResponse> _parser = new pb::MessageParser<DungeonUnfinishedResponse>(() => new DungeonUnfinishedResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonUnfinishedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonUnfinishedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonUnfinishedResponse(DungeonUnfinishedResponse other) : this() {
      CurrentDungeonLevel = other.currentDungeonLevel_ != null ? other.CurrentDungeonLevel.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonUnfinishedResponse Clone() {
      return new DungeonUnfinishedResponse(this);
    }

    /// <summary>Field number for the "CurrentDungeonLevel" field.</summary>
    public const int CurrentDungeonLevelFieldNumber = 1;
    private global::Protobuf.Data.DungeonLevel currentDungeonLevel_;
    /// <summary>
    ///* 上次中途退出时，正在玩的副本层级。可能为空，为空时，表示没有正在玩的副本。 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.DungeonLevel CurrentDungeonLevel {
      get { return currentDungeonLevel_; }
      set {
        currentDungeonLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonUnfinishedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonUnfinishedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CurrentDungeonLevel, other.CurrentDungeonLevel)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (currentDungeonLevel_ != null) hash ^= CurrentDungeonLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (currentDungeonLevel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CurrentDungeonLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (currentDungeonLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentDungeonLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonUnfinishedResponse other) {
      if (other == null) {
        return;
      }
      if (other.currentDungeonLevel_ != null) {
        if (currentDungeonLevel_ == null) {
          currentDungeonLevel_ = new global::Protobuf.Data.DungeonLevel();
        }
        CurrentDungeonLevel.MergeFrom(other.CurrentDungeonLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (currentDungeonLevel_ == null) {
              currentDungeonLevel_ = new global::Protobuf.Data.DungeonLevel();
            }
            input.ReadMessage(currentDungeonLevel_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 进入副本 
  /// </summary>
  public sealed partial class DungeonStartRequest : pb::IMessage<DungeonStartRequest> {
    private static readonly pb::MessageParser<DungeonStartRequest> _parser = new pb::MessageParser<DungeonStartRequest>(() => new DungeonStartRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonStartRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStartRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStartRequest(DungeonStartRequest other) : this() {
      Dungeon = other.dungeon_ != null ? other.Dungeon.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStartRequest Clone() {
      return new DungeonStartRequest(this);
    }

    /// <summary>Field number for the "Dungeon" field.</summary>
    public const int DungeonFieldNumber = 1;
    private global::Protobuf.Data.Dungeon dungeon_;
    /// <summary>
    ///* 副本 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.Dungeon Dungeon {
      get { return dungeon_; }
      set {
        dungeon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonStartRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonStartRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dungeon, other.Dungeon)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dungeon_ != null) hash ^= Dungeon.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dungeon_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dungeon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dungeon_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dungeon);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonStartRequest other) {
      if (other == null) {
        return;
      }
      if (other.dungeon_ != null) {
        if (dungeon_ == null) {
          dungeon_ = new global::Protobuf.Data.Dungeon();
        }
        Dungeon.MergeFrom(other.Dungeon);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dungeon_ == null) {
              dungeon_ = new global::Protobuf.Data.Dungeon();
            }
            input.ReadMessage(dungeon_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DungeonStartResponse : pb::IMessage<DungeonStartResponse> {
    private static readonly pb::MessageParser<DungeonStartResponse> _parser = new pb::MessageParser<DungeonStartResponse>(() => new DungeonStartResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonStartResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStartResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStartResponse(DungeonStartResponse other) : this() {
      DungeonLevel = other.dungeonLevel_ != null ? other.DungeonLevel.Clone() : null;
      PlayerStatus = other.playerStatus_ != null ? other.PlayerStatus.Clone() : null;
      playerDeadTimes_ = other.playerDeadTimes_;
      CardMap = other.cardMap_ != null ? other.CardMap.Clone() : null;
      currentCardMapIndex_ = other.currentCardMapIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonStartResponse Clone() {
      return new DungeonStartResponse(this);
    }

    /// <summary>Field number for the "DungeonLevel" field.</summary>
    public const int DungeonLevelFieldNumber = 1;
    private global::Protobuf.Data.DungeonLevel dungeonLevel_;
    /// <summary>
    ///* 副本层级进度 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.DungeonLevel DungeonLevel {
      get { return dungeonLevel_; }
      set {
        dungeonLevel_ = value;
      }
    }

    /// <summary>Field number for the "PlayerStatus" field.</summary>
    public const int PlayerStatusFieldNumber = 2;
    private global::Protobuf.Data.PlayerStatus playerStatus_;
    /// <summary>
    ///* 玩家状态 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.PlayerStatus PlayerStatus {
      get { return playerStatus_; }
      set {
        playerStatus_ = value;
      }
    }

    /// <summary>Field number for the "PlayerDeadTimes" field.</summary>
    public const int PlayerDeadTimesFieldNumber = 3;
    private int playerDeadTimes_;
    /// <summary>
    ///* 死亡次数 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerDeadTimes {
      get { return playerDeadTimes_; }
      set {
        playerDeadTimes_ = value;
      }
    }

    /// <summary>Field number for the "CardMap" field.</summary>
    public const int CardMapFieldNumber = 4;
    private global::Protobuf.Data.CardMap cardMap_;
    /// <summary>
    ///* 地图信息 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protobuf.Data.CardMap CardMap {
      get { return cardMap_; }
      set {
        cardMap_ = value;
      }
    }

    /// <summary>Field number for the "CurrentCardMapIndex" field.</summary>
    public const int CurrentCardMapIndexFieldNumber = 5;
    private int currentCardMapIndex_;
    /// <summary>
    ///* 当前棋子位置 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentCardMapIndex {
      get { return currentCardMapIndex_; }
      set {
        currentCardMapIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonStartResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonStartResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(DungeonLevel, other.DungeonLevel)) return false;
      if (!object.Equals(PlayerStatus, other.PlayerStatus)) return false;
      if (PlayerDeadTimes != other.PlayerDeadTimes) return false;
      if (!object.Equals(CardMap, other.CardMap)) return false;
      if (CurrentCardMapIndex != other.CurrentCardMapIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dungeonLevel_ != null) hash ^= DungeonLevel.GetHashCode();
      if (playerStatus_ != null) hash ^= PlayerStatus.GetHashCode();
      if (PlayerDeadTimes != 0) hash ^= PlayerDeadTimes.GetHashCode();
      if (cardMap_ != null) hash ^= CardMap.GetHashCode();
      if (CurrentCardMapIndex != 0) hash ^= CurrentCardMapIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dungeonLevel_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(DungeonLevel);
      }
      if (playerStatus_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PlayerStatus);
      }
      if (PlayerDeadTimes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerDeadTimes);
      }
      if (cardMap_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CardMap);
      }
      if (CurrentCardMapIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CurrentCardMapIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dungeonLevel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DungeonLevel);
      }
      if (playerStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerStatus);
      }
      if (PlayerDeadTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerDeadTimes);
      }
      if (cardMap_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CardMap);
      }
      if (CurrentCardMapIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentCardMapIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonStartResponse other) {
      if (other == null) {
        return;
      }
      if (other.dungeonLevel_ != null) {
        if (dungeonLevel_ == null) {
          dungeonLevel_ = new global::Protobuf.Data.DungeonLevel();
        }
        DungeonLevel.MergeFrom(other.DungeonLevel);
      }
      if (other.playerStatus_ != null) {
        if (playerStatus_ == null) {
          playerStatus_ = new global::Protobuf.Data.PlayerStatus();
        }
        PlayerStatus.MergeFrom(other.PlayerStatus);
      }
      if (other.PlayerDeadTimes != 0) {
        PlayerDeadTimes = other.PlayerDeadTimes;
      }
      if (other.cardMap_ != null) {
        if (cardMap_ == null) {
          cardMap_ = new global::Protobuf.Data.CardMap();
        }
        CardMap.MergeFrom(other.CardMap);
      }
      if (other.CurrentCardMapIndex != 0) {
        CurrentCardMapIndex = other.CurrentCardMapIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (dungeonLevel_ == null) {
              dungeonLevel_ = new global::Protobuf.Data.DungeonLevel();
            }
            input.ReadMessage(dungeonLevel_);
            break;
          }
          case 18: {
            if (playerStatus_ == null) {
              playerStatus_ = new global::Protobuf.Data.PlayerStatus();
            }
            input.ReadMessage(playerStatus_);
            break;
          }
          case 24: {
            PlayerDeadTimes = input.ReadInt32();
            break;
          }
          case 34: {
            if (cardMap_ == null) {
              cardMap_ = new global::Protobuf.Data.CardMap();
            }
            input.ReadMessage(cardMap_);
            break;
          }
          case 40: {
            CurrentCardMapIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 移动棋子 
  /// </summary>
  public sealed partial class DungeonMoveRequest : pb::IMessage<DungeonMoveRequest> {
    private static readonly pb::MessageParser<DungeonMoveRequest> _parser = new pb::MessageParser<DungeonMoveRequest>(() => new DungeonMoveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonMoveRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonMoveRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonMoveRequest(DungeonMoveRequest other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonMoveRequest Clone() {
      return new DungeonMoveRequest(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///* 地图下标 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonMoveRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonMoveRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonMoveRequest other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DungeonMoveResponse : pb::IMessage<DungeonMoveResponse> {
    private static readonly pb::MessageParser<DungeonMoveResponse> _parser = new pb::MessageParser<DungeonMoveResponse>(() => new DungeonMoveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonMoveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonMoveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonMoveResponse(DungeonMoveResponse other) : this() {
      events_ = other.events_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonMoveResponse Clone() {
      return new DungeonMoveResponse(this);
    }

    /// <summary>Field number for the "Events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.Data.Event> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.Data.Event.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Data.Event> events_ = new pbc::RepeatedField<global::Protobuf.Data.Event>();
    /// <summary>
    ///* 移动后的事件列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Data.Event> Events {
      get { return events_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonMoveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonMoveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonMoveResponse other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 复活 
  /// </summary>
  public sealed partial class DungeonRevivePriceResponse : pb::IMessage<DungeonRevivePriceResponse> {
    private static readonly pb::MessageParser<DungeonRevivePriceResponse> _parser = new pb::MessageParser<DungeonRevivePriceResponse>(() => new DungeonRevivePriceResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonRevivePriceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonRevivePriceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonRevivePriceResponse(DungeonRevivePriceResponse other) : this() {
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonRevivePriceResponse Clone() {
      return new DungeonRevivePriceResponse(this);
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private int gold_;
    /// <summary>
    ///* 元宝数量 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonRevivePriceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonRevivePriceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonRevivePriceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DungeonReviveResponse : pb::IMessage<DungeonReviveResponse> {
    private static readonly pb::MessageParser<DungeonReviveResponse> _parser = new pb::MessageParser<DungeonReviveResponse>(() => new DungeonReviveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonReviveResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonReviveResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonReviveResponse(DungeonReviveResponse other) : this() {
      success_ = other.success_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonReviveResponse Clone() {
      return new DungeonReviveResponse(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    /// <summary>
    ///* 是否成功，一定为true */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonReviveResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonReviveResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonReviveResponse other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通关/失败结算 
  /// </summary>
  public sealed partial class DungeonFinishResponse : pb::IMessage<DungeonFinishResponse> {
    private static readonly pb::MessageParser<DungeonFinishResponse> _parser = new pb::MessageParser<DungeonFinishResponse>(() => new DungeonFinishResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DungeonFinishResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protobuf.Data.GameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonFinishResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonFinishResponse(DungeonFinishResponse other) : this() {
      rewards_ = other.rewards_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DungeonFinishResponse Clone() {
      return new DungeonFinishResponse(this);
    }

    /// <summary>Field number for the "Rewards" field.</summary>
    public const int RewardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protobuf.Data.CardPackReward> _repeated_rewards_codec
        = pb::FieldCodec.ForMessage(10, global::Protobuf.Data.CardPackReward.Parser);
    private readonly pbc::RepeatedField<global::Protobuf.Data.CardPackReward> rewards_ = new pbc::RepeatedField<global::Protobuf.Data.CardPackReward>();
    /// <summary>
    ///* 奖励卡包列表 */
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protobuf.Data.CardPackReward> Rewards {
      get { return rewards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DungeonFinishResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DungeonFinishResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rewards_.Equals(other.rewards_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rewards_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rewards_.WriteTo(output, _repeated_rewards_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rewards_.CalculateSize(_repeated_rewards_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DungeonFinishResponse other) {
      if (other == null) {
        return;
      }
      rewards_.Add(other.rewards_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
